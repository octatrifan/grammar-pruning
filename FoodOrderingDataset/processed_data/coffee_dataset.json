[
    {
        "input": "i would like a regular latte cinnamon iced with one extra espresso shot",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='cinnamon_roast', size='regular', style='iced', toppings=[Topping(name='ESPRESSO_SHOT_1')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(latte)",
            "roast_type(cinnamon_roast)",
            "style(iced)",
            "topping(espresso_shot_1)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "one regular latte light roast with an extra espresso shot and honey added and one large cappuccino with caramel syrup in that one",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='light_roast', size='regular', toppings=[Topping(name='ESPRESSO_SHOT_1'), Topping(name='honey')]), DrinkOrder(number=1, drink_type='cappuccino', size='large', toppings=[Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(latte)",
            "roast_type(light_roast)",
            "topping(espresso_shot_1)",
            "topping(honey)",
            "number(1)",
            "size(large)",
            "drink_type(cappuccino)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'll have a regular dark roast americano with foam please",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', roast_type='dark_roast', size='regular', toppings=[Topping(name='foam')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(americano)",
            "roast_type(dark_roast)",
            "topping(foam)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "a regular hot chocolate with whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='regular', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(hot_chocolate)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "could i get a large dark roast drip coffee please",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='dark_roast', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(dark_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "large hot chocolate extra whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='large', toppings=[Topping(name='whipped_cream', qualifier='extra')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(hot_chocolate)",
            "topping(whipped_cream)",
            "quantity(extra)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a regular iced cinnamon latte",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='regular', style='iced', toppings=[Topping(name='cinnamon')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(latte)",
            "style(iced)",
            "topping(cinnamon)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a small hot chocolate please",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='small')]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(hot_chocolate)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a regular latte medium roast add some cinnamon and plenty of foam to that as well",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='medium_roast', size='regular', toppings=[Topping(name='cinnamon'), Topping(name='foam')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(latte)",
            "roast_type(medium_roast)",
            "topping(cinnamon)",
            "topping(foam)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a small iced latte with vanilla syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='small', style='iced', toppings=[Topping(name='vanilla_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(latte)",
            "style(iced)",
            "topping(vanilla_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a large caramel latte",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='large', toppings=[Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a regular size americano please",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', size='regular')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(americano)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "may i please have a regular hot latte with hazelnut syrup and an extra espresso shot",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='regular', toppings=[Topping(name='hazelnut_syrup'), Topping(name='ESPRESSO_SHOT_1')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(latte)",
            "topping(hazelnut_syrup)",
            "topping(espresso_shot_1)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "large cappuccino with vanilla syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', size='large', toppings=[Topping(name='vanilla_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(cappuccino)",
            "topping(vanilla_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'll have an extra large black dark roast drip coffee",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='dark_roast', size='extra_large')]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(drip_coffee)",
            "roast_type(dark_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a large caffe latte medium roast",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='medium_roast', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(medium_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a regular medium roast espresso with one extra espresso shot",
        "output_generate": "[DrinkOrder(number=1, drink_type='espresso', roast_type='medium_roast', size='regular', toppings=[Topping(name='ESPRESSO_SHOT_1')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(espresso)",
            "roast_type(medium_roast)",
            "topping(espresso_shot_1)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a small iced cinnamon cappuccino with an extra espresso shot add whipped cream and raspberry syrup please",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', size='small', style='iced', toppings=[Topping(name='cinnamon'), Topping(name='ESPRESSO_SHOT_1'), Topping(name='whipped_cream'), Topping(name='raspberry_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(cappuccino)",
            "style(iced)",
            "topping(cinnamon)",
            "topping(espresso_shot_1)",
            "topping(whipped_cream)",
            "topping(raspberry_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a small medium roast drip coffee",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='medium_roast', size='small')]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(drip_coffee)",
            "roast_type(medium_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want a large hot chocolate please",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(hot_chocolate)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "could i please get a large iced latte with one pump of caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='large', style='iced', toppings=[Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "style(iced)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "give me a large decaf cappuccino in french roast and top it off with whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', roast_type='french', size='large', style='decaf', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(cappuccino)",
            "roast_type(french)",
            "style(decaf)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "large french vanilla iced coffee add espresso",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='french', size='large', style='iced', toppings=[Topping(name='vanilla_syrup'), Topping(name='ESPRESSO_SHOT_1')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(french)",
            "style(iced)",
            "topping(vanilla_syrup)",
            "topping(espresso_shot_1)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want an extra large dark roast latte with vanilla syrup and whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='dark_roast', size='extra_large', toppings=[Topping(name='vanilla_syrup'), Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(latte)",
            "roast_type(dark_roast)",
            "topping(vanilla_syrup)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a large hot chocolate with whipped cream and cinnamon on top please",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='large', toppings=[Topping(name='whipped_cream'), Topping(name='cinnamon')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(hot_chocolate)",
            "topping(whipped_cream)",
            "topping(cinnamon)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a regular french roast iced cappuccino with hazelnut syrup and whipped cream on top",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', roast_type='french', size='regular', style='iced', toppings=[Topping(name='hazelnut_syrup'), Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(cappuccino)",
            "roast_type(french)",
            "style(iced)",
            "topping(hazelnut_syrup)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "large french roast americano with caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', roast_type='french', size='large', toppings=[Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(americano)",
            "roast_type(french)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "small drip coffee medium roast hot",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='medium_roast', size='small')]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(drip_coffee)",
            "roast_type(medium_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want a large hot chocolate with one extra espresso shot",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='large', toppings=[Topping(name='ESPRESSO_SHOT_1')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(hot_chocolate)",
            "topping(espresso_shot_1)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "regular size drip coffee medium roast black no toppings",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='medium_roast', size='regular')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(drip_coffee)",
            "roast_type(medium_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i have an extra large medium roast vanilla latte",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='medium_roast', size='extra_large', toppings=[Topping(name='vanilla_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(latte)",
            "roast_type(medium_roast)",
            "topping(vanilla_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "a large french roast drip with vanilla syrup and whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='french', size='large', toppings=[Topping(name='vanilla_syrup'), Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(french)",
            "topping(vanilla_syrup)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a regular hot chocolate with caramel syrup and whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='regular', toppings=[Topping(name='caramel_syrup'), Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(hot_chocolate)",
            "topping(caramel_syrup)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a regular size hot chocolate with whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='regular', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(hot_chocolate)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a small french skinny latte with whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='french', size='small', style='skinny', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(latte)",
            "roast_type(french)",
            "style(skinny)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "id like an extra large hot chocolate with foam",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='extra_large', toppings=[Topping(name='foam')])]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(hot_chocolate)",
            "topping(foam)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i need one small iced cappuccino with whipped cream and two extra shots of espresso",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', size='small', style='iced', toppings=[Topping(name='whipped_cream'), Topping(name='ESPRESSO_SHOT_2')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(cappuccino)",
            "style(iced)",
            "topping(whipped_cream)",
            "topping(espresso_shot_2)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "and a small decaf drip coffee light roast",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='light_roast', size='small', style='decaf')]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(drip_coffee)",
            "roast_type(light_roast)",
            "style(decaf)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "cappuccino extra large two extra shots",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', size='extra_large', toppings=[Topping(name='ESPRESSO_SHOT_2')])]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(cappuccino)",
            "topping(espresso_shot_2)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a large americano",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(americano)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want a regular americano with caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', size='regular', toppings=[Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(americano)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "may i have a large medium roast coffee with 1 shot of caramel syrup and one shot of honey",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='medium_roast', size='large', toppings=[Topping(name='caramel_syrup'), Topping(name='honey')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(medium_roast)",
            "topping(caramel_syrup)",
            "topping(honey)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "let me get a regular iced dark roast latte",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='dark_roast', size='regular', style='iced')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(latte)",
            "roast_type(dark_roast)",
            "style(iced)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i need a large french latte with caramel and whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='french', size='large', toppings=[Topping(name='caramel_syrup'), Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(french)",
            "topping(caramel_syrup)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "a large latte please dark roast with two extra espresso shots i'd like hazelnut syrup with added crumbles on top",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='dark_roast', size='large', toppings=[Topping(name='ESPRESSO_SHOT_2'), Topping(name='hazelnut_syrup'), Topping(name='crumbles')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(dark_roast)",
            "topping(espresso_shot_2)",
            "topping(hazelnut_syrup)",
            "topping(crumbles)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like to order a regular espresso with some cinnamon inside",
        "output_generate": "[DrinkOrder(number=1, drink_type='espresso', size='regular', toppings=[Topping(name='cinnamon')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(espresso)",
            "topping(cinnamon)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "may i please have an extra large decaf drip with caramel syrup drizzles",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', size='extra_large', style='decaf', toppings=[Topping(name='caramel_syrup'), Topping(name='drizzles')])]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(drip_coffee)",
            "style(decaf)",
            "topping(caramel_syrup)",
            "topping(drizzles)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "could you give me a large drip coffee with guatemalan roast",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='guatemalan', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(guatemalan)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "large iced medium roast drip coffee with vanilla and caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='medium_roast', size='large', style='iced', toppings=[Topping(name='vanilla_syrup'), Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(medium_roast)",
            "style(iced)",
            "topping(vanilla_syrup)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "ok i want a large italian latte with honey and caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='italian', size='large', toppings=[Topping(name='honey'), Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(italian)",
            "topping(honey)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a small latte with a bit of vanilla",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='small', toppings=[Topping(name='vanilla_syrup', qualifier='light')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(latte)",
            "topping(vanilla_syrup)",
            "quantity(light)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like an iced cappuccino with caramel syrup and whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', style='iced', toppings=[Topping(name='caramel_syrup'), Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "drink_type(cappuccino)",
            "style(iced)",
            "topping(caramel_syrup)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want a large skinny latte medium roast with foam",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='medium_roast', size='large', style='skinny', toppings=[Topping(name='foam')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(medium_roast)",
            "style(skinny)",
            "topping(foam)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "a small hot chocolate",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='small')]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(hot_chocolate)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a small iced cinnamon latte with whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='small', style='iced', toppings=[Topping(name='cinnamon'), Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(latte)",
            "style(iced)",
            "topping(cinnamon)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'll have a large cappucino dark roast please add drizzles over foam too",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', roast_type='dark_roast', size='large', toppings=[Topping(name='drizzles'), Topping(name='foam')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(cappuccino)",
            "roast_type(dark_roast)",
            "topping(drizzles)",
            "topping(foam)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "please give me a large latte french roast and a medium americano dark roast with caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='french', size='large'), DrinkOrder(number=1, drink_type='americano', roast_type='dark_roast', size='regular', toppings=[Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(french)",
            "number(1)",
            "size(regular)",
            "drink_type(americano)",
            "roast_type(dark_roast)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a regular size iced latte with vanilla syrup please",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='regular', style='iced', toppings=[Topping(name='vanilla_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(latte)",
            "style(iced)",
            "topping(vanilla_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a drip coffee regular size french roast",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='french', size='regular')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(drip_coffee)",
            "roast_type(french)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a regular light roast coffee plain please",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='light_roast', size='regular')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(drip_coffee)",
            "roast_type(light_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i need a large medium roast skinny latte with raspberry syrup and a small dark roast americano with whipped cream on top",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='medium_roast', size='large', style='skinny', toppings=[Topping(name='raspberry_syrup')]), DrinkOrder(number=1, drink_type='americano', roast_type='dark_roast', size='small', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(medium_roast)",
            "style(skinny)",
            "topping(raspberry_syrup)",
            "number(1)",
            "size(small)",
            "drink_type(americano)",
            "roast_type(dark_roast)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i have a large dark roast cappuccino flavored with caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', roast_type='dark_roast', size='large', style='flavored', toppings=[Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(cappuccino)",
            "roast_type(dark_roast)",
            "style(flavored)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "could i get one large americano with hazelnut syrup and cinnamon please also one extra espresso shot in that would be great",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', size='large', toppings=[Topping(name='hazelnut_syrup'), Topping(name='cinnamon'), Topping(name='ESPRESSO_SHOT_1')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(americano)",
            "topping(hazelnut_syrup)",
            "topping(cinnamon)",
            "topping(espresso_shot_1)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "give me an extra large expresso dark roast one extra expresso shot",
        "output_generate": "[DrinkOrder(number=1, drink_type='espresso', roast_type='dark_roast', size='extra_large', toppings=[Topping(name='ESPRESSO_SHOT_1')])]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(espresso)",
            "roast_type(dark_roast)",
            "topping(espresso_shot_1)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "give me a small hot chocolate with a bit of hazelnut syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='small', toppings=[Topping(name='hazelnut_syrup', qualifier='light')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(hot_chocolate)",
            "topping(hazelnut_syrup)",
            "quantity(light)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i have a large french roast decaf coffee with whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='french', size='large', style='decaf', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(french)",
            "style(decaf)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "extra large drip coffee dark roast",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='dark_roast', size='extra_large')]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(drip_coffee)",
            "roast_type(dark_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "please give me a medium roast drip coffee decaf regular size",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='medium_roast', size='regular', style='decaf')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(drip_coffee)",
            "roast_type(medium_roast)",
            "style(decaf)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "a large french latte please",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='french', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(french)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "a large iced latte with caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='large', style='iced', toppings=[Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "style(iced)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "one large skinny latte regular syrup with one layer of foam",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='large', style='skinny', toppings=[Topping(name='syrup'), Topping(name='foam')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "style(skinny)",
            "topping(syrup)",
            "topping(foam)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a large hot chocolate",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(hot_chocolate)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a medium dark roast black coffee",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='dark_roast', size='regular')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(drip_coffee)",
            "roast_type(dark_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "one large black drip coffee please thanks",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a large dark roast cappuccino with vanilla and caramel syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', roast_type='dark_roast', size='large', toppings=[Topping(name='vanilla_syrup'), Topping(name='caramel_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(cappuccino)",
            "roast_type(dark_roast)",
            "topping(vanilla_syrup)",
            "topping(caramel_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want two large espressos with cinnamon and drizzle please",
        "output_generate": "[DrinkOrder(number=2, drink_type='espresso', size='large', toppings=[Topping(name='cinnamon'), Topping(name='drizzles')])]",
        "output_extract": [
            "number(2)",
            "size(large)",
            "drink_type(espresso)",
            "topping(cinnamon)",
            "topping(drizzles)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "regular hot chocolate with cinnamon syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='regular', toppings=[Topping(name='syrup')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(hot_chocolate)",
            "topping(syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a large hot chocolate with whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='large', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(hot_chocolate)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "could you get me a large french roast americano coffee",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', roast_type='french', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(americano)",
            "roast_type(french)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a large iced caffe americano full city roast",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', roast_type='full_city_roast', size='large', style='iced')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(americano)",
            "roast_type(full_city_roast)",
            "style(iced)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a regular sized iced hot chocolate",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='regular', style='iced')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(hot_chocolate)",
            "style(iced)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get just a regular medium roast americano",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', roast_type='medium_roast', size='regular')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(americano)",
            "roast_type(medium_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i please have a small french roast iced latte",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='french', size='small', style='iced')]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(latte)",
            "roast_type(french)",
            "style(iced)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a small iced americano black no cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', size='small', style='iced', toppings=[Topping(name='whipped_cream', negation=True)])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(americano)",
            "style(iced)",
            "not(not)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want a large hot chocolate with whipped cream",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='large', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(hot_chocolate)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i have an extra large drip coffee italian roast",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='italian', size='extra_large')]",
        "output_extract": [
            "number(1)",
            "size(extra_large)",
            "drink_type(drip_coffee)",
            "roast_type(italian)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want a regular hot chocolate sprinkled with cinnamon and add whipped cream please",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='regular', toppings=[Topping(name='cinnamon'), Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(hot_chocolate)",
            "topping(cinnamon)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a small hot chocolate with whipped cream and a regular drip coffee with vanilla syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='small', toppings=[Topping(name='whipped_cream')]), DrinkOrder(number=1, drink_type='drip_coffee', size='regular', toppings=[Topping(name='vanilla_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(hot_chocolate)",
            "topping(whipped_cream)",
            "number(1)",
            "size(regular)",
            "drink_type(drip_coffee)",
            "topping(vanilla_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i have a large iced vanilla latte",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', size='large', style='iced', toppings=[Topping(name='vanilla_syrup')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "style(iced)",
            "topping(vanilla_syrup)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "could you make that with light roast coffee",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='light_roast')]",
        "output_extract": [
            "number(1)",
            "drink_type(drip_coffee)",
            "roast_type(light_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i want a large french roasted latte with ice and no toppings please",
        "output_generate": "[DrinkOrder(number=1, drink_type='latte', roast_type='french', size='large', style='iced')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(latte)",
            "roast_type(french)",
            "style(iced)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "just a regular french roast coffee please",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='french', size='regular')]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(drip_coffee)",
            "roast_type(french)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a large dark roast drip coffee please",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='dark_roast', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(dark_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "may i please have a regular iced americano with extra foam",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', size='regular', style='iced', toppings=[Topping(name='foam', qualifier='extra')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(americano)",
            "style(iced)",
            "topping(foam)",
            "quantity(extra)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i'd like a large decaf continental with vanilla syrup and a small skinny italian roast cappuccino with crumbles on top",
        "output_generate": "[DrinkOrder(number=1, roast_type='continental_roast', size='large', style='decaf', toppings=[Topping(name='vanilla_syrup')]), DrinkOrder(number=1, drink_type='cappuccino', roast_type='italian', size='small', style='skinny', toppings=[Topping(name='crumbles')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "roast_type(continental_roast)",
            "style(decaf)",
            "topping(vanilla_syrup)",
            "number(1)",
            "size(small)",
            "drink_type(cappuccino)",
            "roast_type(italian)",
            "style(skinny)",
            "topping(crumbles)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "may i please have a large decaf cinnamon roast coffee with a tiny bit of hazelnut syrup",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='cinnamon_roast', size='large', style='decaf', toppings=[Topping(name='hazelnut_syrup', qualifier='light')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(cinnamon_roast)",
            "style(decaf)",
            "topping(hazelnut_syrup)",
            "quantity(light)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "large light roast cappuccino iced with caramel syrup and one espresso shot please",
        "output_generate": "[DrinkOrder(number=1, drink_type='cappuccino', roast_type='light_roast', size='large', style='iced', toppings=[Topping(name='caramel_syrup'), Topping(name='ESPRESSO_SHOT_1')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(cappuccino)",
            "roast_type(light_roast)",
            "style(iced)",
            "topping(caramel_syrup)",
            "topping(espresso_shot_1)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "let me have a large drip coffee medium roast black",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='medium_roast', size='large')]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(drip_coffee)",
            "roast_type(medium_roast)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "i would like a large hot chocolate with whipped cream on it",
        "output_generate": "[DrinkOrder(number=1, drink_type='hot_chocolate', size='large', toppings=[Topping(name='whipped_cream')])]",
        "output_extract": [
            "number(1)",
            "size(large)",
            "drink_type(hot_chocolate)",
            "topping(whipped_cream)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "can i get a small iced coffee decaf french roast with hazelnut drizzles",
        "output_generate": "[DrinkOrder(number=1, drink_type='drip_coffee', roast_type='french', size='small', style='iced', toppings=[Topping(name='hazelnut_syrup'), Topping(name='drizzles')])]",
        "output_extract": [
            "number(1)",
            "size(small)",
            "drink_type(drip_coffee)",
            "roast_type(french)",
            "style(iced)",
            "topping(hazelnut_syrup)",
            "topping(drizzles)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    },
    {
        "input": "hi i'd like a regular medium roast americano with two extra shots of espresso",
        "output_generate": "[DrinkOrder(number=1, drink_type='americano', roast_type='medium_roast', size='regular', toppings=[Topping(name='ESPRESSO_SHOT_2')])]",
        "output_extract": [
            "number(1)",
            "size(regular)",
            "drink_type(americano)",
            "roast_type(medium_roast)",
            "topping(espresso_shot_2)"
        ],
        "instruction_extract": "You are a helpful assistant. You have to take as input a customer order and output a list of all the corresponding items that you find in the order. You should use only items from the following list:\n['drink_type(americano)', 'drink_type(cappuccino)', 'drink_type(drip_coffee)', 'drink_type(espresso)', 'drink_type(hot_chocolate)', 'drink_type(latte)', 'not(not)', 'roast_type(cinnamon_roast)', 'roast_type(continental_roast)', 'roast_type(dark_roast)', 'roast_type(french)', 'roast_type(full_city_roast)', 'roast_type(guatemalan)', 'roast_type(italian)', 'roast_type(light_roast)', 'roast_type(medium_roast)', 'size(extra_large)', 'size(large)', 'size(regular)', 'size(small)', 'style(decaf)', 'style(flavored)', 'style(iced)', 'style(skinny)', 'topping(espresso_shot_1)', 'topping(espresso_shot_2)', 'topping(espresso_shot_3)', 'topping(espresso_shot_4)', 'topping(caramel_syrup)', 'topping(cinnamon)', 'topping(cinnamon_dolce_syrup)', 'topping(crumbles)', 'topping(drizzles)', 'topping(foam)', 'topping(hazelnut_syrup)', 'topping(honey)', 'topping(raspberry_syrup)', 'topping(syrup)', 'topping(vanilla_syrup)', 'topping(whipped_cream)', 'number(1)', 'number(10)', 'number(11)', 'number(12)', 'number(13)', 'number(14)', 'number(15)', 'number(2)', 'number(3)', 'number(4)', 'number(5)', 'number(6)', 'number(7)', 'number(8)', 'number(9)', 'quantity(extra)', 'quantity(light)']",
        "instruction_generate": "You are a helpful assistant. You have to take as input a customer order and output a list of the corresponding objects. You should use only the following classes in Python:\nclass Topping:\n    def __init__(self, name: str, qualifier: Optional[str] = None, negation: Optional[bool] = False) -> None:\n\nclass DrinkOrder:\n    def __init__(self, number: int = 1, drink_type: Optional[str] = None, size: Optional[str] = None, style: Optional[str] = None, roast_type: Optional[str] = None, toppings: Optional[List[Topping]] = None) -> None:\n\nThe output should be a list of those objects.\n"
    }
]